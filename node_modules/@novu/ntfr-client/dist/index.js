'use strict';

var zod = require('zod');
var partysocket = require('partysocket');

// src/index.ts
var RequestMesssage = zod.z.object({
  type: zod.z.literal("request"),
  id: zod.z.string(),
  headers: zod.z.record(zod.z.string()),
  method: zod.z.string(),
  url: zod.z.string(),
  body: zod.z.string(),
  https: zod.z.boolean().default(false).optional()
});
var ResponseMessage = zod.z.object({
  type: zod.z.literal("response"),
  id: zod.z.string(),
  status: zod.z.number(),
  headers: zod.z.record(zod.z.string()),
  body: zod.z.string()
});
var ClientMessages = zod.z.discriminatedUnion("type", [ResponseMessage]);
var ServerMessages = zod.z.discriminatedUnion("type", [RequestMesssage]);
async function createRequestMessage(id, request) {
  const { headers, method, url } = request;
  const body = await request.text();
  return {
    type: "request",
    id,
    headers: stripHeaders(Object.fromEntries(headers)),
    method,
    url,
    body: method === "GET" ? "" : body
  };
}
async function createResponseMessage(id, response) {
  const { headers, status } = response;
  const body = await response.text();
  return {
    type: "response",
    id,
    headers: Object.fromEntries(headers),
    status,
    body
  };
}
var NtfrApiClient = class {
  constructor(host, apiKey) {
    this.host = host;
    this.apiKey = apiKey;
  }
  async createTunnel() {
    const response = await fetch(`https://admin.${this.host}/api/tunnels`, {
      method: "POST",
      headers: {
        accept: "application/json",
        authorization: `Bearer ${this.apiKey}`
      }
    });
    if (!response.ok) {
      throw new Error(`Could not create tunnel: ${response.status}`);
    }
    const body = await response.json();
    return body.id;
  }
};
var NtfrTunnel = class {
  constructor(url, address, https, socketOptions = {}, options = {}) {
    this.url = url;
    this.address = address;
    this.https = https;
    this.socketOptions = socketOptions;
    this.options = options;
  }
  log(message, properties = {}) {
    if (this.options.verbose) {
      console.log(JSON.stringify({ message, ...properties }));
    }
  }
  get isConnected() {
    if (this.socket?.readyState === void 0) return void 0;
    return this.socket?.readyState === this.socket?.OPEN;
  }
  get isConnecting() {
    if (this.socket?.readyState === void 0) return void 0;
    return this.socket?.readyState === this.socket?.CONNECTING;
  }
  get isClosed() {
    if (this.socket?.readyState === void 0) return void 0;
    return this.socket?.readyState === this.socket?.CLOSED;
  }
  get isClosing() {
    if (this.socket?.readyState === void 0) return void 0;
    return this.socket?.readyState === this.socket?.CLOSING;
  }
  async connect() {
    this.log("Connecting to tunnel", {
      url: this.url,
      address: this.address,
      socketOptions: this.socketOptions
    });
    this.socket = new partysocket.WebSocket(`wss://${this.url}/connect`, [], this.socketOptions);
    if (!this.socket) throw new Error("Socket is not connected");
    this.socket.addEventListener("close", (event) => {
      this.log("Disconnected from tunnel", { event: event.code, reason: event.reason });
    });
    this.socket.addEventListener("message", async (event) => {
      const data = JSON.parse(
        typeof event.data === "string" ? event.data : new TextDecoder("utf-8").decode(event.data)
      );
      const message = ServerMessages.safeParse(data);
      if (!message.success) {
        this.log("Received invalid message", { data });
        return;
      }
      switch (message.data.type) {
        case "request": {
          await this.handleRequest(message.data);
          break;
        }
        default: {
          console.error(`Unknown message type: ${message.data.type}`);
        }
      }
    });
    await new Promise((resolve, reject) => {
      if (!this.socket) throw new Error("Socket is not connected");
      this.socket.addEventListener("open", (args) => {
        this.log("Connected to tunnel");
        resolve();
      });
      this.socket.addEventListener("error", (event) => {
        this.log("Socket error", { error: event.message });
        reject();
      });
    });
  }
  async handleRequest(request) {
    if (!this.socket) {
      throw new Error("Socket is not connected");
    }
    const url = new URL(request.url);
    const originalUrl = new URL(
      `${this.https ? "https" : "http"}://${this.address}${url.pathname}${url.search}${url.hash}`
    );
    let response = null;
    this.log("Sending local request", {
      originalUrl: originalUrl.href,
      requestId: request.id,
      headers: request.headers,
      method: request.method
    });
    try {
      response = await fetch(originalUrl.href, {
        method: request.method,
        headers: stripHeaders(request.headers),
        body: request.method === "GET" ? void 0 : request.body
      });
    } catch (error) {
      if (error instanceof Error) {
        this.log("Error sending local request", {
          error: error.message,
          name: error.name,
          stack: error.stack,
          requestId: request.id,
          cause: "cause" in error ? error.cause : void 0
        });
      } else {
        this.log("Error sending local request", { error, requestId: request.id });
      }
      response = new Response(
        JSON.stringify({
          message: `Could not connect to ${originalUrl.href}. Make sure you are running your local app server`
        }),
        { status: 502, headers: { "Content-Type": "application/json" } }
      );
    }
    try {
      await this.sendResponse(request.id, response, this.socket);
    } catch (error) {
      console.error(error);
    }
  }
  async sendResponse(id, response, socket) {
    const message = await createResponseMessage(id, response);
    this.log("Sending response", { requestId: id, status: response.status, data: JSON.stringify(message) });
    return socket.send(JSON.stringify(message));
  }
};
function stripHeaders(headers) {
  const blacklistHeaders = [
    "connection",
    "cf-ray",
    "cf-connecting-ip",
    "host",
    "cf-ipcountry",
    "content-length"
  ];
  return Object.fromEntries(
    Object.entries(headers).filter(([key]) => !blacklistHeaders.includes(key.toLowerCase()))
  );
}

exports.ClientMessages = ClientMessages;
exports.NtfrApiClient = NtfrApiClient;
exports.NtfrTunnel = NtfrTunnel;
exports.RequestMesssage = RequestMesssage;
exports.ResponseMessage = ResponseMessage;
exports.ServerMessages = ServerMessages;
exports.createRequestMessage = createRequestMessage;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map