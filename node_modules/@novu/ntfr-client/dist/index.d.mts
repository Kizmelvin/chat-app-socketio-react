import { z } from 'zod';
import { WebSocket } from 'partysocket';

declare const RequestMesssage: z.ZodObject<{
    type: z.ZodLiteral<"request">;
    id: z.ZodString;
    headers: z.ZodRecord<z.ZodString, z.ZodString>;
    method: z.ZodString;
    url: z.ZodString;
    body: z.ZodString;
    https: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    type: "request";
    id: string;
    headers: Record<string, string>;
    method: string;
    url: string;
    body: string;
    https?: boolean | undefined;
}, {
    type: "request";
    id: string;
    headers: Record<string, string>;
    method: string;
    url: string;
    body: string;
    https?: boolean | undefined;
}>;
type RequestMessage = z.infer<typeof RequestMesssage>;
declare const ResponseMessage: z.ZodObject<{
    type: z.ZodLiteral<"response">;
    id: z.ZodString;
    status: z.ZodNumber;
    headers: z.ZodRecord<z.ZodString, z.ZodString>;
    body: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "response";
    status: number;
    id: string;
    headers: Record<string, string>;
    body: string;
}, {
    type: "response";
    status: number;
    id: string;
    headers: Record<string, string>;
    body: string;
}>;
type ResponseMessage = z.infer<typeof ResponseMessage>;
declare const ClientMessages: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"response">;
    id: z.ZodString;
    status: z.ZodNumber;
    headers: z.ZodRecord<z.ZodString, z.ZodString>;
    body: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "response";
    status: number;
    id: string;
    headers: Record<string, string>;
    body: string;
}, {
    type: "response";
    status: number;
    id: string;
    headers: Record<string, string>;
    body: string;
}>]>;
declare const ServerMessages: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"request">;
    id: z.ZodString;
    headers: z.ZodRecord<z.ZodString, z.ZodString>;
    method: z.ZodString;
    url: z.ZodString;
    body: z.ZodString;
    https: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    type: "request";
    id: string;
    headers: Record<string, string>;
    method: string;
    url: string;
    body: string;
    https?: boolean | undefined;
}, {
    type: "request";
    id: string;
    headers: Record<string, string>;
    method: string;
    url: string;
    body: string;
    https?: boolean | undefined;
}>]>;
type ClientMessage = z.infer<typeof ClientMessages>;
type ServerMessage = z.infer<typeof ServerMessages>;
type RequestInfo = any;
type RequestInit = any;
declare function createRequestMessage(id: string, request: Request): Promise<RequestMessage>;
declare class NtfrApiClient {
    private host;
    private apiKey;
    constructor(host: string, apiKey: string);
    createTunnel(): Promise<string>;
}
type NtfrTunnelSocketOptions = {
    WebSocket?: any;
    connectionTimeout?: number;
    maxRetries?: number;
};
type NtfrTunnelOptions = {
    verbose?: boolean;
};
type StatusResponse = boolean | undefined;
declare class NtfrTunnel {
    private url;
    private address;
    private https;
    private socketOptions;
    private options;
    socket?: WebSocket;
    constructor(url: string, address: string, https: boolean, socketOptions?: NtfrTunnelSocketOptions, options?: NtfrTunnelOptions);
    private log;
    get isConnected(): StatusResponse;
    get isConnecting(): StatusResponse;
    get isClosed(): StatusResponse;
    get isClosing(): StatusResponse;
    connect(): Promise<void>;
    private handleRequest;
    private sendResponse;
}

export { type ClientMessage, ClientMessages, NtfrApiClient, NtfrTunnel, type NtfrTunnelOptions, type NtfrTunnelSocketOptions, type RequestInfo, type RequestInit, type RequestMessage, RequestMesssage, ResponseMessage, type ServerMessage, ServerMessages, createRequestMessage };
