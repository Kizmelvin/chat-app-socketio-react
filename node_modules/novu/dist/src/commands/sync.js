"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildHmac = exports.buildSignature = exports.executeSync = exports.sync = void 0;
const axios_1 = __importDefault(require("axios"));
const crypto_1 = require("crypto");
async function sync(bridgeUrl, secretKey, apiUrl) {
    if (!bridgeUrl) {
        throw new Error('A bridge URL is required for the sync command, please supply it when running the command');
    }
    if (!secretKey) {
        throw new Error('A secret key is required for the sync command, please supply it when running the command');
    }
    if (!apiUrl) {
        throw new Error('An API url is required for the sync command, please omit the configuration option entirely or supply a valid API url when running the command');
    }
    const syncResult = await executeSync(apiUrl, bridgeUrl, secretKey);
    if (syncResult.status >= 400) {
        console.error(new Error(JSON.stringify(syncResult.data)));
        process.exit(1);
    }
    return syncResult.data;
}
exports.sync = sync;
async function executeSync(apiUrl, bridgeUrl, secretKey) {
    const url = `${apiUrl}/v1/bridge/sync?source=cli`;
    return await axios_1.default.post(url, {
        bridgeUrl,
    }, {
        headers: {
            'Content-Type': 'application/json',
            Authorization: `ApiKey ${secretKey}`,
        },
    });
}
exports.executeSync = executeSync;
function buildSignature(secretKey) {
    const timestamp = Date.now();
    return `t=${timestamp},v1=${buildHmac(secretKey, timestamp)}`;
}
exports.buildSignature = buildSignature;
function buildHmac(secretKey, timestamp) {
    return (0, crypto_1.createHmac)('sha256', secretKey)
        .update(timestamp + '.' + JSON.stringify({}))
        .digest('hex');
}
exports.buildHmac = buildHmac;
